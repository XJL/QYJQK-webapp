注意点：

IOS 安装手动配置
https://github.com/johanneslumpe/react-native-fs
https://github.com/alinz/react-native-webview-bridge

RCTWebViewBridge.m 添加
#import <objc/runtime.h>


1. react native webview bridge 的修改
    a. node_modules/react-native-webview-bridge/webview-bridge/index.ios.js
        头部修改为：
            import React, { Component } from 'react';
            var invariant = require('invariant');
            var keyMirror = require('keymirror');
            var resolveAssetSource = require('react-native/Libraries/Image/resolveAssetSource');
            var {PropTypes} = React;
            var {
              ActivityIndicatorIOS,
              EdgeInsetsPropType,
              StyleSheet,
              Text,
              View,
              WebView,
              requireNativeComponent,
              UIManager,
              NativeModules: {
                WebViewBridgeManager
              },
              findNodeHandle,
            } = require('react-native');

        中间findNodeHandle方法React类去掉：
            return findNodeHandle(this.refs[RCT_WEBVIEWBRIDGE_REF]);

    b. node_modules/react-native-webview-bridge/webview-bridge/index.android.js
        头部修改为：
            import React, { Component } from 'react';
            var invariant = require('invariant');
            var keyMirror = require('keymirror');
            var merge = require('merge');
            var resolveAssetSource = require('react-native/Libraries/Image/resolveAssetSource');
            var {PropTypes} = React;
            var {
                ActivityIndicatorIOS,
                EdgeInsetsPropType,
                StyleSheet,
                Text,
                View,
                WebView,
                requireNativeComponent,
                UIManager,
                DeviceEventEmitter,
                NativeModules: {
                    WebViewBridgeManager
                },
                findNodeHandle,
            }  = require('react-native');

        中间添加一个listener对象:
            var WebViewBridge = React.createClass({
              listener:null,   <----
              propTypes: {
                ...WebView.propTypes,

                /**
                 * Will be called once the message is being sent from webview
                 */
                onBridgeMessage: PropTypes.func,
              },

            将监听方法赋值给该对象：
              componentWillMount: function() {
                this.listener=DeviceEventEmitter.addListener("webViewBridgeMessage", (body) => {    <--------
                  const { onBridgeMessage } = this.props;
                  const message = body.message;
                  if (onBridgeMessage) {
                    onBridgeMessage(message);
                  }
                });

                if (this.props.startInLoadingState) {
                  this.setState({viewState: WebViewBridgeState.LOADING});
                }
              },

            卸载DOM时销毁listener:
              componentWillUnmount:function(){
                this.listener.remove();
                this.listener=null;
              },

